#!/bin/bash

# Local Docker build and push to ECR
set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}üöÄ VPBank K-MULT Local Build & Deploy${NC}"
echo "=================================================="

# Configuration
AWS_REGION="us-east-1"
AWS_ACCOUNT_ID="536697254280"
IMAGE_REPO_NAME="vpbank-kmult-backend"
IMAGE_TAG="local-$(date +%Y%m%d-%H%M%S)"

echo -e "${BLUE}üìã Build Configuration:${NC}"
echo "‚Ä¢ AWS Region: $AWS_REGION"
echo "‚Ä¢ Account ID: $AWS_ACCOUNT_ID"
echo "‚Ä¢ Repository: $IMAGE_REPO_NAME"
echo "‚Ä¢ Image Tag: $IMAGE_TAG"
echo ""

# Navigate to project directory
cd /home/ubuntu/multi-agent-hackathon

# Step 1: Login to ECR
echo -e "${BLUE}üîê Logging in to Amazon ECR...${NC}"
aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ ECR login successful${NC}"
else
    echo -e "${RED}‚ùå ECR login failed${NC}"
    exit 1
fi

# Step 2: Build Docker image
echo -e "${BLUE}üî® Building Docker image...${NC}"
docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f backend/Dockerfile.prod backend/

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Docker build successful${NC}"
else
    echo -e "${RED}‚ùå Docker build failed${NC}"
    exit 1
fi

# Step 3: Tag image for ECR
echo -e "${BLUE}üè∑Ô∏è  Tagging image for ECR...${NC}"
docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest

# Step 4: Push to ECR
echo -e "${BLUE}‚¨ÜÔ∏è  Pushing image to ECR...${NC}"
docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Image pushed successfully${NC}"
else
    echo -e "${RED}‚ùå Image push failed${NC}"
    exit 1
fi

# Step 5: Get image details
echo -e "${BLUE}üìä Image details:${NC}"
aws ecr describe-images --repository-name $IMAGE_REPO_NAME --image-ids imageTag=$IMAGE_TAG --region $AWS_REGION --query 'imageDetails[0].[imageTags[0],imagePushedAt,imageSizeInBytes]' --output table

# Step 6: Clean up local images (optional)
echo -e "${BLUE}üßπ Cleaning up local images...${NC}"
docker rmi $IMAGE_REPO_NAME:$IMAGE_TAG || true
docker rmi $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG || true

echo ""
echo -e "${GREEN}üéâ Deployment completed successfully!${NC}"
echo ""
echo "üìã Summary:"
echo "‚Ä¢ Image built and pushed to ECR"
echo "‚Ä¢ Repository: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME"
echo "‚Ä¢ Tags: $IMAGE_TAG, latest"
echo ""
echo "üîó Links:"
echo "‚Ä¢ ECR Console: https://console.aws.amazon.com/ecr/repositories/private/$AWS_ACCOUNT_ID/$IMAGE_REPO_NAME"
echo ""
echo -e "${BLUE}üöÄ Next steps:${NC}"
echo "‚Ä¢ Deploy to ECS or update existing service"
echo "‚Ä¢ Run: aws ecs update-service --cluster your-cluster --service your-service --force-new-deployment"
