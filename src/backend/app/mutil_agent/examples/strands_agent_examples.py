"""
VPBank K-MULT Agent Studio - Strands Agent Examples
Multi-Agent Hackathon 2025 - Group 181

Example usage of Strands Agent tools for banking automation
"""

import asyncio
import json
import logging
from typing import Dict, Any

# Import Strands Agent tools
from app.mutil_agent.agents.strands_tools import (
    compliance_validation_agent,
    risk_assessment_agent,
    document_intelligence_agent,
    vpbank_supervisor_agent
)

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def example_compliance_validation():
    """
    Example: Compliance validation for Letter of Credit document
    """
    print("\n" + "="*80)
    print("üîç EXAMPLE 1: COMPLIANCE VALIDATION AGENT")
    print("="*80)
    
    # Sample LC document text
    lc_document = """
    LETTER OF CREDIT NO: LC-2025-001234
    DATE: 29/01/2025
    
    APPLICANT: ABC TRADING COMPANY LIMITED
    ADDRESS: 123 NGUYEN HUE STREET, DISTRICT 1, HO CHI MINH CITY, VIETNAM
    
    BENEFICIARY: XYZ EXPORT CORPORATION
    ADDRESS: 456 MAIN STREET, NEW YORK, USA
    
    AMOUNT: USD 500,000.00 (FIVE HUNDRED THOUSAND US DOLLARS)
    
    EXPIRY DATE: 28/02/2025
    EXPIRY PLACE: HO CHI MINH CITY, VIETNAM
    
    AVAILABLE WITH: VIETCOMBANK - HO CHI MINH CITY BRANCH
    BY: NEGOTIATION
    
    DOCUMENTS REQUIRED:
    1. COMMERCIAL INVOICE IN TRIPLICATE
    2. PACKING LIST IN DUPLICATE
    3. FULL SET OF CLEAN ON BOARD OCEAN BILLS OF LADING
    4. CERTIFICATE OF ORIGIN
    5. INSURANCE POLICY OR CERTIFICATE
    
    DESCRIPTION OF GOODS: ELECTRONIC COMPONENTS
    
    SHIPMENT FROM: HO CHI MINH PORT, VIETNAM
    SHIPMENT TO: NEW YORK PORT, USA
    
    LATEST SHIPMENT DATE: 15/02/2025
    
    SPECIAL CONDITIONS:
    - PARTIAL SHIPMENTS: NOT ALLOWED
    - TRANSSHIPMENT: ALLOWED
    - DOCUMENTS MUST BE PRESENTED WITHIN 21 DAYS AFTER SHIPMENT DATE
    """
    
    try:
        # Call compliance validation agent
        result_json = compliance_validation_agent(lc_document, "letter_of_credit")
        result = json.loads(result_json)
        
        print(f"‚úÖ Compliance Status: {result.get('compliance_validation', {}).get('compliance_status', 'Unknown')}")
        print(f"üìä Confidence Score: {result.get('processing_info', {}).get('confidence_score', 'Unknown')}")
        print(f"üîç Agent Analysis: {result.get('agent_analysis', 'No analysis available')[:200]}...")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return None


async def example_risk_assessment():
    """
    Example: Risk assessment for loan application
    """
    print("\n" + "="*80)
    print("üìä EXAMPLE 2: RISK ASSESSMENT AGENT")
    print("="*80)
    
    # Sample loan application data
    financial_docs = """
    FINANCIAL STATEMENT - ABC TRADING COMPANY LIMITED
    
    REVENUE (2024): 15,000,000,000 VND
    GROSS PROFIT: 3,000,000,000 VND
    NET PROFIT: 1,200,000,000 VND
    
    ASSETS:
    - CURRENT ASSETS: 8,000,000,000 VND
    - FIXED ASSETS: 12,000,000,000 VND
    - TOTAL ASSETS: 20,000,000,000 VND
    
    LIABILITIES:
    - CURRENT LIABILITIES: 4,000,000,000 VND
    - LONG-TERM DEBT: 6,000,000,000 VND
    - TOTAL LIABILITIES: 10,000,000,000 VND
    
    EQUITY: 10,000,000,000 VND
    
    CASH FLOW (2024): 2,500,000,000 VND
    DEBT-TO-EQUITY RATIO: 1.0
    CURRENT RATIO: 2.0
    """
    
    try:
        # Call risk assessment agent
        result_json = risk_assessment_agent(
            applicant_name="ABC Trading Company Limited",
            business_type="import_export",
            requested_amount=5000000000,  # 5 billion VND
            currency="VND",
            loan_term=24,
            loan_purpose="working_capital",
            assessment_type="comprehensive",
            collateral_type="real_estate",
            financial_documents=financial_docs
        )
        result = json.loads(result_json)
        
        print(f"‚úÖ Risk Score: {result.get('risk_assessment', {}).get('risk_score', 'Unknown')}")
        print(f"üìà Risk Category: {result.get('risk_assessment', {}).get('risk_category', 'Unknown')}")
        print(f"üí∞ Requested Amount: {result.get('processing_info', {}).get('requested_amount', 'Unknown'):,.0f} {result.get('processing_info', {}).get('currency', '')}")
        print(f"üîç Agent Analysis: {result.get('agent_analysis', 'No analysis available')[:200]}...")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return None


async def example_document_intelligence():
    """
    Example: Document intelligence for Vietnamese banking document
    """
    print("\n" + "="*80)
    print("üìÑ EXAMPLE 3: DOCUMENT INTELLIGENCE AGENT")
    print("="*80)
    
    # Sample Vietnamese banking document
    vietnamese_doc = """
    NG√ÇN H√ÄNG TMCP NGO·∫†I TH∆Ø∆†NG VI·ªÜT NAM
    CHI NH√ÅNH TP. H·ªí CH√ç MINH
    
    GI·∫§Y X√ÅC NH·∫¨N T√ÄI KHO·∫¢N
    
    K√≠nh g·ª≠i: C√îNG TY TNHH TH∆Ø∆†NG M·∫†I ABC
    ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh
    
    Ng√¢n h√†ng ch√∫ng t√¥i xin x√°c nh·∫≠n:
    
    S·ªë t√†i kho·∫£n: 0011001234567
    T√™n t√†i kho·∫£n: C√îNG TY TNHH TH∆Ø∆†NG M·∫†I ABC
    Lo·∫°i t√†i kho·∫£n: T√†i kho·∫£n thanh to√°n
    ƒê∆°n v·ªã ti·ªÅn t·ªá: VND
    
    S·ªë d∆∞ t√†i kho·∫£n t·∫°i ng√†y 29/01/2025: 2,500,000,000 VND
    (B·∫±ng ch·ªØ: Hai t·ª∑ nƒÉm trƒÉm tri·ªáu ƒë·ªìng)
    
    T√†i kho·∫£n ƒë∆∞·ª£c m·ªü t·ª´ ng√†y: 15/03/2020
    T√¨nh tr·∫°ng t√†i kho·∫£n: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
    
    Gi·∫•y x√°c nh·∫≠n n√†y c√≥ gi√° tr·ªã trong 30 ng√†y k·ªÉ t·ª´ ng√†y c·∫•p.
    
    TP. H·ªì Ch√≠ Minh, ng√†y 29 th√°ng 01 nƒÉm 2025
    
    GI√ÅM ƒê·ªêC CHI NH√ÅNH
    (K√Ω t√™n v√† ƒë√≥ng d·∫•u)
    
    NGUY·ªÑN VƒÇN A
    """
    
    try:
        # Call document intelligence agent
        result_json = document_intelligence_agent(vietnamese_doc, "account_confirmation")
        result = json.loads(result_json)
        
        print(f"‚úÖ Document Type: {result.get('processing_info', {}).get('document_type', 'Unknown')}")
        print(f"üìä Content Length: {result.get('processing_info', {}).get('content_length', 'Unknown')} characters")
        print(f"üéØ Confidence Score: {result.get('processing_info', {}).get('confidence_score', 'Unknown')}")
        print(f"üîç Agent Analysis: {result.get('agent_analysis', 'No analysis available')[:200]}...")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return None


async def example_supervisor_orchestration():
    """
    Example: Supervisor agent orchestrating multiple agents
    """
    print("\n" + "="*80)
    print("üéØ EXAMPLE 4: SUPERVISOR AGENT ORCHESTRATION")
    print("="*80)
    
    # Complex banking request requiring multiple agents
    complex_request = """
    T√¥i c·∫ßn x·ª≠ l√Ω m·ªôt g√≥i t√†i li·ªáu cho kho·∫£n vay 5 t·ª∑ VND c·ªßa C√¥ng ty ABC Trading.
    
    T√†i li·ªáu bao g·ªìm:
    1. ƒê∆°n xin vay v·ªõi th√¥ng tin: C√¥ng ty ABC Trading, ng√†nh xu·∫•t nh·∫≠p kh·∫©u, vay 5 t·ª∑ VND trong 24 th√°ng
    2. B√°o c√°o t√†i ch√≠nh cho th·∫•y doanh thu 15 t·ª∑, l·ª£i nhu·∫≠n 1.2 t·ª∑
    3. Th∆∞ t√≠n d·ª•ng LC-2025-001234 tr·ªã gi√° 500,000 USD c·∫ßn ki·ªÉm tra tu√¢n th·ªß UCP 600
    
    Y√™u c·∫ßu:
    - ƒê√°nh gi√° r·ªßi ro t√≠n d·ª•ng
    - Ki·ªÉm tra tu√¢n th·ªß quy ƒë·ªãnh
    - Ph√¢n t√≠ch t√†i li·ªáu
    - ƒê∆∞a ra khuy·∫øn ngh·ªã t·ªïng th·ªÉ
    """
    
    context = {
        "customer_type": "corporate",
        "loan_amount": 5000000000,
        "currency": "VND",
        "business_sector": "import_export",
        "processing_priority": "high"
    }
    
    try:
        # Call supervisor agent
        result_json = vpbank_supervisor_agent(complex_request, context)
        result = json.loads(result_json)
        
        print(f"‚úÖ Processing Status: {result.get('status', 'Unknown')}")
        print(f"üìã Request Length: {result.get('processing_info', {}).get('request_length', 'Unknown')} characters")
        print(f"ü§ñ Available Agents: {', '.join(result.get('processing_info', {}).get('agents_available', []))}")
        print(f"üéØ Supervisor Response: {result.get('supervisor_response', 'No response available')[:300]}...")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return None


async def run_all_examples():
    """
    Run all Strands Agent examples
    """
    print("\n" + "üè¶" + "="*78 + "üè¶")
    print("  VPBank K-MULT Agent Studio - Strands Agent Examples")
    print("  Multi-Agent Hackathon 2025 - Group 181")
    print("üè¶" + "="*78 + "üè¶")
    
    # Run examples
    examples = [
        ("Compliance Validation", example_compliance_validation),
        ("Risk Assessment", example_risk_assessment),
        ("Document Intelligence", example_document_intelligence),
        ("Supervisor Orchestration", example_supervisor_orchestration)
    ]
    
    results = {}
    
    for name, example_func in examples:
        try:
            print(f"\nüöÄ Running {name} example...")
            result = await example_func()
            results[name] = result
            print(f"‚úÖ {name} completed successfully")
        except Exception as e:
            print(f"‚ùå {name} failed: {str(e)}")
            results[name] = None
    
    # Summary
    print("\n" + "="*80)
    print("üìä EXAMPLES SUMMARY")
    print("="*80)
    
    successful = sum(1 for result in results.values() if result is not None)
    total = len(results)
    
    print(f"‚úÖ Successful: {successful}/{total}")
    print(f"‚ùå Failed: {total - successful}/{total}")
    
    for name, result in results.items():
        status = "‚úÖ SUCCESS" if result is not None else "‚ùå FAILED"
        print(f"  {name}: {status}")
    
    print("\nüéâ All examples completed!")
    return results


if __name__ == "__main__":
    # Run examples
    asyncio.run(run_all_examples())
